{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaswa\\\\Downloads\\\\school_management_react\\\\src\\\\components\\\\Students.js\";\nimport React, { useEffect, useState } from 'react';\nimport axiosInstance from '../axiosInstance'; // Import the Axios instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Students = () => {\n  // const [students, setStudents] = useState([]); // Default state is an empty array\n  // const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n\n  // const [newStudent, setNewStudent] = useState({\n  //   rollNumber: '',\n  //   name: '',\n  //   age: '',\n  //   studentClassName: '',\n  // });\n\n  // const [updateStudent, setUpdateStudent] = useState(null); // State for the student to be updated\n  // const [formError, setFormError] = useState(null);\n\n  // useEffect(() => {\n  //   const fetchStudents = async () => {\n  //     try {\n  //       const response = await axiosInstance.get('/students');\n  //       setStudents(Array.isArray(response.data) ? response.data : []);\n  //       setLoading(false);\n  //     } catch (err) {\n  //       console.error('Failed to fetch students:', err);\n  //       setError('Failed to load students. Please try again later.');\n  //       setLoading(false);\n  //     }\n  //   };\n\n  //   fetchStudents();\n  // }, []);\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setNewStudent((prevState) => ({\n  //     ...prevState,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // const handleUpdateChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setUpdateStudent((prevState) => ({\n  //     ...prevState,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!newStudent.rollNumber || !newStudent.name || !newStudent.age || !newStudent.studentClassName) {\n  //     setFormError('All fields are required!');\n  //     return;\n  //   }\n\n  //   try {\n  //     const response = await axiosInstance.post('/students/addStudent', newStudent);\n  //     setStudents((prevStudents) => [...prevStudents, response.data]);\n  //     setNewStudent({\n  //       rollNumber: '',\n  //       name: '',\n  //       age: '',\n  //       studentClassName: '',\n  //     });\n  //     setFormError(null);\n  //   } catch (err) {\n  //     console.error('Error adding student:', err);\n  //     setError('Failed to add student. Please try again later.');\n  //   }\n  // };\n\n  // const handleDelete = async (id) => {\n  //   try {\n  //     await axiosInstance.delete(`/students/deleteStudent/${id}`);\n  //     setStudents((prevStudents) => prevStudents.filter((student) => student.id !== id));\n  //   } catch (err) {\n  //     console.error('Error deleting student:', err);\n  //     setError('Failed to delete student. Please try again later.');\n  //   }\n  // };\n\n  // const handleUpdate = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!updateStudent.rollNumber || !updateStudent.name || !updateStudent.age || !updateStudent.studentClassName) {\n  //     setFormError('All fields are required!');\n  //     return;\n  //   }\n\n  //   try {\n  //     const response = await axiosInstance.put(`/students/updateStudent/${updateStudent.id}`, updateStudent);\n  //     setStudents((prevStudents) => prevStudents.map((student) =>\n  //       student.id === updateStudent.id ? response.data : student\n  //     ));\n  //     setUpdateStudent(null); // Close the form after updating\n  //     setFormError(null);\n  //   } catch (err) {\n  //     console.error('Error updating student:', err);\n  //     setError('Failed to update student. Please try again later.');\n  //   }\n  // };\n\n  // const handleEdit = (student) => {\n  //   setUpdateStudent(student);\n  // };\n\n  // if (loading) {\n  //   return <div>Loading...</div>;\n  // }\n\n  // if (error) {\n  //   return <div>{error}</div>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome! Please Choose an Option:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = '/students',\n        style: {\n          margin: '10px',\n          padding: '10px 20px'\n        },\n        children: \"Students\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = '/teachers',\n        style: {\n          margin: '10px',\n          padding: '10px 20px'\n        },\n        children: \"Teachers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_c = Students;\nexport default Students;\nvar _c;\n$RefreshReg$(_c, \"Students\");","map":{"version":3,"names":["React","useEffect","useState","axiosInstance","jsxDEV","_jsxDEV","Students","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","href","margin","padding","_c","$RefreshReg$"],"sources":["C:/Users/jaswa/Downloads/school_management_react/src/components/Students.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axiosInstance from '../axiosInstance';  // Import the Axios instance\n\nconst Students = () => {\n  // const [students, setStudents] = useState([]); // Default state is an empty array\n  // const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n\n  // const [newStudent, setNewStudent] = useState({\n  //   rollNumber: '',\n  //   name: '',\n  //   age: '',\n  //   studentClassName: '',\n  // });\n\n  // const [updateStudent, setUpdateStudent] = useState(null); // State for the student to be updated\n  // const [formError, setFormError] = useState(null);\n\n  // useEffect(() => {\n  //   const fetchStudents = async () => {\n  //     try {\n  //       const response = await axiosInstance.get('/students');\n  //       setStudents(Array.isArray(response.data) ? response.data : []);\n  //       setLoading(false);\n  //     } catch (err) {\n  //       console.error('Failed to fetch students:', err);\n  //       setError('Failed to load students. Please try again later.');\n  //       setLoading(false);\n  //     }\n  //   };\n\n  //   fetchStudents();\n  // }, []);\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setNewStudent((prevState) => ({\n  //     ...prevState,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // const handleUpdateChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setUpdateStudent((prevState) => ({\n  //     ...prevState,\n  //     [name]: value,\n  //   }));\n  // };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!newStudent.rollNumber || !newStudent.name || !newStudent.age || !newStudent.studentClassName) {\n  //     setFormError('All fields are required!');\n  //     return;\n  //   }\n\n  //   try {\n  //     const response = await axiosInstance.post('/students/addStudent', newStudent);\n  //     setStudents((prevStudents) => [...prevStudents, response.data]);\n  //     setNewStudent({\n  //       rollNumber: '',\n  //       name: '',\n  //       age: '',\n  //       studentClassName: '',\n  //     });\n  //     setFormError(null);\n  //   } catch (err) {\n  //     console.error('Error adding student:', err);\n  //     setError('Failed to add student. Please try again later.');\n  //   }\n  // };\n\n  // const handleDelete = async (id) => {\n  //   try {\n  //     await axiosInstance.delete(`/students/deleteStudent/${id}`);\n  //     setStudents((prevStudents) => prevStudents.filter((student) => student.id !== id));\n  //   } catch (err) {\n  //     console.error('Error deleting student:', err);\n  //     setError('Failed to delete student. Please try again later.');\n  //   }\n  // };\n\n  // const handleUpdate = async (e) => {\n  //   e.preventDefault();\n\n  //   if (!updateStudent.rollNumber || !updateStudent.name || !updateStudent.age || !updateStudent.studentClassName) {\n  //     setFormError('All fields are required!');\n  //     return;\n  //   }\n\n  //   try {\n  //     const response = await axiosInstance.put(`/students/updateStudent/${updateStudent.id}`, updateStudent);\n  //     setStudents((prevStudents) => prevStudents.map((student) =>\n  //       student.id === updateStudent.id ? response.data : student\n  //     ));\n  //     setUpdateStudent(null); // Close the form after updating\n  //     setFormError(null);\n  //   } catch (err) {\n  //     console.error('Error updating student:', err);\n  //     setError('Failed to update student. Please try again later.');\n  //   }\n  // };\n\n  // const handleEdit = (student) => {\n  //   setUpdateStudent(student);\n  // };\n\n  // if (loading) {\n  //   return <div>Loading...</div>;\n  // }\n\n  // if (error) {\n  //   return <div>{error}</div>;\n  // }\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Welcome! Please Choose an Option:</h1>\n      <div style={{ marginTop: '30px' }}>\n        <button\n          onClick={() => (window.location.href = '/students')}\n          style={{ margin: '10px', padding: '10px 20px' }}\n        >\n          Students\n        </button>\n        <button\n          onClick={() => (window.location.href = '/teachers')}\n          style={{ margin: '10px', padding: '10px 20px' }}\n        >\n          Teachers\n        </button>\n      </div>\n    </div>\n  );\n};\n\n\nexport default Students;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,kBAAkB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACED,OAAA;IAAKE,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACrDL,OAAA;MAAAK,QAAA,EAAI;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1CT,OAAA;MAAKE,KAAK,EAAE;QAAEE,SAAS,EAAE;MAAO,CAAE;MAAAC,QAAA,gBAChCL,OAAA;QACEU,OAAO,EAAEA,CAAA,KAAOC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAa;QACpDX,KAAK,EAAE;UAAEY,MAAM,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAY,CAAE;QAAAV,QAAA,EACjD;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTT,OAAA;QACEU,OAAO,EAAEA,CAAA,KAAOC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAa;QACpDX,KAAK,EAAE;UAAEY,MAAM,EAAE,MAAM;UAAEC,OAAO,EAAE;QAAY,CAAE;QAAAV,QAAA,EACjD;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACO,EAAA,GArIIf,QAAQ;AAwId,eAAeA,QAAQ;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}